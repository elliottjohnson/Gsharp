(in-package :gsharp)

(defun transform-gesture (gesture)
  (list (car gesture) (apply #'make-modifier-state (cdr gesture))))

(defun add-keyseq (gestures command table)
  (setf (dico-object table (mapcar #'transform-gesture gestures))
	command))


;;; global mode table
(defparameter *global-mode-table* (make-sequence-dico :test #'equal))

(add-keyseq '((#\L :shift)) 'com-lower *global-mode-table*)
(add-keyseq '((#\H :shift)) 'com-higher *global-mode-table*)
(add-keyseq '((#\f :control)) 'com-forward-element *global-mode-table*)
(add-keyseq '((#\b :control)) 'com-backward-element *global-mode-table*)
(add-keyseq '((#\d :control)) 'com-delete-element *global-mode-table*)
(add-keyseq '((#\h :control)) 'com-erase-element *global-mode-table*)
(add-keyseq '((#\c)) 'com-insert-note-c *global-mode-table*)
(add-keyseq '((#\d)) 'com-insert-note-d *global-mode-table*)
(add-keyseq '((#\e)) 'com-insert-note-e *global-mode-table*)
(add-keyseq '((#\f)) 'com-insert-note-f *global-mode-table*)
(add-keyseq '((#\g)) 'com-insert-note-g *global-mode-table*)
(add-keyseq '((#\a)) 'com-insert-note-a *global-mode-table*)
(add-keyseq '((#\b)) 'com-insert-note-b *global-mode-table*)
(add-keyseq '((#\,)) 'com-insert-rest *global-mode-table*)
(add-keyseq '((#\Space)) 'com-insert-empty-cluster *global-mode-table*)
(add-keyseq '((#\C :shift)) 'com-add-note-c *global-mode-table*)
(add-keyseq '((#\D :shift)) 'com-add-note-d *global-mode-table*)
(add-keyseq '((#\E :shift)) 'com-add-note-e *global-mode-table*)
(add-keyseq '((#\F :shift)) 'com-add-note-f *global-mode-table*)
(add-keyseq '((#\G :shift)) 'com-add-note-g *global-mode-table*)
(add-keyseq '((#\A :shift)) 'com-add-note-a *global-mode-table*)
(add-keyseq '((#\B :shift)) 'com-add-note-b *global-mode-table*)
(add-keyseq '((#\h :meta)) 'com-rotate-notehead *global-mode-table*)
(add-keyseq '((#\s :meta)) 'com-rotate-stem-direction *global-mode-table*)
(add-keyseq '((#\p)) 'com-current-increment *global-mode-table*)
(add-keyseq '((#\n)) 'com-current-decrement *Global-mode-table*)
(add-keyseq '((#\| :shift)) 'com-insert-measure-bar *global-mode-table*)
(add-keyseq '((#\.)) 'com-more-dots *global-mode-table*)
(add-keyseq '((#\[)) 'com-more-lbeams *global-mode-table*)
(add-keyseq '((#\])) 'com-more-rbeams *global-mode-table*)
(add-keyseq '((#\#)) 'com-sharper *global-mode-table*)
(add-keyseq '((#\# :shift)) 'com-sharper *global-mode-table*)
(add-keyseq '((#\@ :shift)) 'com-flatter *global-mode-table*)
(add-keyseq '((#\# :meta)) 'com-more-sharps *global-mode-table*)
(add-keyseq '((#\# :meta :shift)) 'com-more-sharps *global-mode-table*)
(add-keyseq '((#\@ :meta :shift)) 'com-more-flats *global-mode-table*)
(add-keyseq '((#\u :meta)) 'com-up *global-mode-table*)
(add-keyseq '((#\d :meta)) 'com-down *global-mode-table*)
(add-keyseq '((#\l :meta)) 'com-left *global-mode-table*)
(add-keyseq '((#\r :meta)) 'com-right *global-mode-table*)
(add-keyseq '((#\p :meta)) 'com-previous-layer *global-mode-table*)
(add-keyseq '((#\n :meta)) 'com-next-layer *global-mode-table*)
(add-keyseq '((#\i) (#\.)) 'com-istate-more-dots *global-mode-table*)
(add-keyseq '((#\i) (#\[)) 'com-istate-more-lbeams *global-mode-table*)
(add-keyseq '((#\i) (#\])) 'com-istate-more-rbeams *global-mode-table*)
(add-keyseq '((#\i) (#\h)) 'com-istate-rotate-notehead *global-mode-table*)
(add-keyseq '((#\i) (#\s)) 'com-istate-rotate-stem-direction *global-mode-table*)
(add-keyseq '((#\i) (#\x) (#\.)) 'com-istate-fewer-dots *global-mode-table*)
(add-keyseq '((#\i) (#\x) (#\[)) 'com-istate-fewer-lbeams *global-mode-table*)
(add-keyseq '((#\i) (#\x) (#\])) 'com-istate-fewer-rbeams *global-mode-table*)
(add-keyseq '((#\x) (#\.)) 'com-fewer-dots *global-mode-table*)
(add-keyseq '((#\x) (#\[)) 'com-fewer-lbeams *global-mode-table*)
(add-keyseq '((#\x) (#\])) 'com-fewer-rbeams *global-mode-table*)
(add-keyseq '((#\x :control) (#\( :shift)) 'com-start-kbd-macro *global-mode-table*)
(add-keyseq '((#\x :control) (#\()) 'com-start-kbd-macro *global-mode-table*)
(add-keyseq '((#\x :control) (#\) :shift)) 'com-end-kbd-macro *global-mode-table*)
(add-keyseq '((#\x :control) (#\))) 'com-end-kbd-macro *global-mode-table*)
(add-keyseq '((#\x :control) (#\e)) 'com-call-last-kbd-macro *global-mode-table*)

;;; lyrics mode table

(defparameter *lyrics-layer-mode-table* (make-sequence-dico :test #'equal))



;;; melody mode table
(defparameter *melody-layer-mode-table* (make-sequence-dico :test #'equal))
